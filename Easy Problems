1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Solution:
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    // for(let i=0;i<nums.length;i++){
    //     // if(nums[i]+nums[i+1] === target){
    //     //     return [i,i+1]
    //     // }
    //     for(let j=i+1;j<nums.length;j++){
    //         if(nums[i]+nums[j] === target){
    //             return [i,j]
    //         }
    //     }
    // }
    let map = new Map();
    for(let i=0;i<nums.length;i++){
        let n= nums[i];
        let more = target-n;

        if(map.has(more)){
            return [map.get(more),i]
        }else{
            map.set(n,i)
        }
    }
};


217. Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Sol:
/**
 * @param {number[]} nums
 * @return {boolean}
 */
var containsDuplicate = function(nums) {
    // let appear= {};
    // for(let i=0;i<nums.length;i++){
    //     let n = nums[i];
    //     if(appear[n] !== undefined){
    //         return true;
    //     }else {
    //         appear[n] =nums[i];
    //     }
    // }
    // return false;

    // let dup =0;
    // nums.sort();

    // for(let i=0;i<nums.length;i++){
    //     if(nums[i] === nums[i+1]){
    //         dup++;
    //     }
    // }

    // return dup !=0;

    // using hash map

    let map = new Map()
    for (let num of nums){
        if(map.has(num)){
            return true;
        }else{
            map.set(num,true);
        }
    }
    return false;
};


219. Contains Duplicate II
Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

Sol:
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var containsNearbyDuplicate = function (nums, k) {
    let map = new Map()
    for (let i = 0; i < nums.length; i++) {
        let n = nums[i]
        if (map.has(n) && Math.abs(map.get(n) - i) <= k) {
            return true;
        } else {
            map.set(n, i);
        }
    }
    return false;
};


For node only:

process.stdout.write("hello")
process.stdout.write("world") // hello world both will give output in one line


Pattern programming:

1.  *
    **
    ***
    ****
    *****

Sol:
 for(let i =1;i<=5;i++){
    for(let j=1;j<=i;j++){
        process.stdout.write('*');
    }
    console.log()
}

2.  1
    12
    123
    1234
    12345

for(let i =1;i<=5;i++){
    for(let j=1;j<=i;j++){
        process.stdout.write(j.toString());
    }
    console.log()
}

3.  A
    AB
    ABC
    ABCD
    ABCDE

sol: 
for(let i =1;i<=5;i++){
    let ascii = 65;  // Ascii value of A is 65
    for(let j=1;j<=i;j++){
        process.stdout.write(String.fromCharCode(ascii));
        ascii++;
    }
    console.log()
}

for(let i =1;i<=5;i++){
    let ascii = 97;  // Ascii value of a is 97
    for(let j=1;j<=i;j++){
        process.stdout.write(String.fromCharCode(ascii));
        ascii++;
    }
    console.log()
}


console.log('a'.charCodeAt(0))
console.log(String.fromCharCode(97))


4.  *****
    ****
    ***
    **
    *
Sol:
for(let i=5;i>=1;i--){
    for(let j=1;j<=i;j++){
        process.stdout.write('*')
    }
    console.log()
}

5.
    *
   **
  ***
 ****
*****

Sol: 
let n = 5;
for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= n; j++) {
        if (j > (n - i)) {
            process.stdout.write('*');
        } else {
            process.stdout.write(' ');
        }
    }
    console.log(); // Moves to the next line
}

6. * 
  * * 
 * * * 
* * * * 
* * * * * 

Sol:
let n = 5;
for (let i = 1; i <= n; i++) {
    let str='';
    for(let j=0;j<n-1-i;j++){
        str+=' '
    }
    
    for(let j=0;j<i;j++){
        str+='* '
    }
    console.log(str)
}

7. 
*   *
 * * 
  *  
 * * 
*   *

Sol:  
let n = 5;

for(let i=1;i<=n;i++){
    for(let j=1;j<=n;j++){
        if(i===j){
            process.stdout.write('*')
        }else if(i+j === n+1){
            process.stdout.write('*')
        }else{
            process.stdout.write(' ')
        }
    }
    console.log()
}

8. 
*       *
 *     * 
  *   *  
   * *   
    *    

Sol:
let n = 5;

for(let i=1;i<=n;i++){
    for(let j=1;j<=2*n-1;j++){
        if(i===j || (i+j === 2*n) ){
            process.stdout.write('*')
        }else{
            process.stdout.write(' ')
        }
    }
    console.log()
}


Q.Reversing a array without creating new array

Sol:
let arr = [24,1,4,34,5];

let i= 0, j= arr.length-1;
while(i!=j){
    let temp =arr[i];
    arr[i]= arr[j];
    arr[j] = temp;
    i++;
    j--;
}

Q. In array bring 0 to one side and 1 to another.

Sol:
et arr = [1,0,0,1,1,0,0,1];

let i = 0, j=0;

while(i<arr.length){
    if(arr[i] === 0){
        let temp = arr[i];
        arr[i]=arr[j];
        arr[j] = temp;
        j++
    }
    i++
}
[
  0, 0, 0, 0,
  1, 1, 1, 1
]

Q. shifting array 1 point right or left.

Sol:

let arr = [1,2,3,4,5];

let copy = arr[arr.length-1];

for(let i =0;i<arr.length-1;i++){
        
    arr[i] = arr[i+1]
    
}   
        arr[arr.length-1] = copy;

for(let i = arr.length-1;i>0;i--){
    arr[i] = arr[i-1];
}
arr[0]= copy

console.log("Moved arr is:", arr)
